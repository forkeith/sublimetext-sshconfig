{
	"scope": "source.ssh_config - meta.statement - meta.mapping.value - comment",
	"completions": [
		"Host\tDefine rules for a host",
		"Match\tDefine rules with multiple conditions",
		{ "trigger": "AddKeysToAgent\tAdd keys to a running ssh-agent",
		  "contents": "AddKeysToAgent ${0:{ yes | no | confirm | ask \\}}" },
		{ "trigger": "AddressFamily\tIPv4/IPv6 switch",
		  "contents": "AddressFamily ${0:{ inet4 | inet6 | any \\}}" },
		{ "trigger": "BatchMode\tAllow UI prompts",
		  "contents": "BatchMode ${0:{ yes | no \\}}" },
		{ "trigger": "BindAddress\tSpecify source NIC",
		  "contents": "BindAddress ${0:192.0.2.16}" },
		{ "trigger": "CanonicalDomains\tList of domain suffixes",
		  "contents": "CanonicalDomains ${0:local.example.com,local.example.org}" },
		{ "trigger": "CanonicalizeFallbackLocal\tFallback for domain lookup failure",
		  "contents": "CanonicalizeFallbackLocal ${0:{ yes | no \\}}" },
		{ "trigger": "CanonicalizeHostname\tToggle explicit hostname lookups",
		  "contents": "CanonicalizeHostname ${0:{ yes | no | always \\}}" },
		{ "trigger": "CanonicalizeMaxDots\tNumber of `.`s to disable domain lookup",
		  "contents": "CanonicalizeMaxDots ${0:1}" },
		{ "trigger": "CanonicalizePermittedCNAMEs\tMap of whitelisted CNAMEs to follow on lookup",
		  "contents": "CanonicalizePermittedCNAMEs ${0:*.source.com,source.org:dest.org,*.local.dest.com}" },
		{ "trigger": "CASignatureAlgorithms\tAlgorithms permitted for CAs",
		  "contents": "CASignatureAlgorithms ${0:ssh-ed25519,rsa-sha2-512}" },
		{ "trigger": "CertificateFile\tPath to user certificate",
		  "contents": "CertificateFile ${0:~/.ssh/pem_%h}" },
		{ "trigger": "ChallengeResponseAuthentication\tToggle challenge-response",
		  "contents": "ChallengeResponseAuthentication ${0:{ yes | no \\}}" },
		{ "trigger": "CheckHostIP\tCompare IP to known_hosts",
		  "contents": "CheckHostIP ${0:{ yes | no \\}}" },
		{ "trigger": "Ciphers\tPermitted ciphers",
		  "contents": "Ciphers ${0:^prepend,+append,-remove,replace}" },
		{ "trigger": "ClearAllForwardings\tClear port forwarding",
		  "contents": "CanonicalizeFallbackLocal ${0:{ yes | no \\}}" },
		{ "trigger": "Compression",
		  "contents": "Compression ${0:{ yes | no \\}}" },
		// "CompressionLevel",
		{ "trigger": "ConnectionAttempts\tSet retry for intermittent connections",
		  "contents": "ConnectionAttempts ${0:1}" },
		{ "trigger": "ConnectTimeout\tTimeout in seconds",
		  "contents": "ConnectTimeout ${0:5}" },
		{ "trigger": "ControlMaster\tEnable connection sharing for multiple sessions",
		  "contents": "ControlMaster ${0:{ yes | no | ask \\}}" },
		{ "trigger": "ControlPath\tTokenized path to connection sharing file",
		  "contents": "ControlPath ${0:~/.ssh/control-%h-%p-%r}" },
		{ "trigger": "ControlPersist\tToggle closing connection on disconnect",
		  "contents": "ControlPersist ${0:{ yes | no | 300 (seconds to timeout) \\}}" },
		{ "trigger": "DynamicForward\tDynamic SSH or SOCKS port forwarding",
		  "contents": "DynamicForward ${0:[address:]port}" },
		{ "trigger": "EnableSSHKeysign\tEnable ssh-keysign for HostbasedAuthentication",
		  "contents": "EnableSSHKeysign ${0:{ yes | no \\}}" },
		{ "trigger": "EscapeChar\tDefault ~",
		  "contents": "EscapeChar ${0:{ ^E | none \\}}" },
		{ "trigger": "ExitOnForwardFailure\tToggle termination if port forwarding fails",
		  "contents": "ExitOnForwardFailure ${0:{ yes | no \\}}" },
		{ "trigger": "FingerprintHash\tKey hash algorithm",
		  "contents": "FingerprintHash ${0:{ sha256 | md5 \\}}" },
		{ "trigger": "ForwardAgent\tToggle forwarding ssh-agent keys to outbound ssh",
		  "contents": "ForwardAgent ${0:{ yes | no | ~/path/to/socket | \\$PATH_VAR \\}}" },
		{ "trigger": "ForwardX11",
		  "contents": "ForwardX11 ${0:{ yes | no \\}}" },
		{ "trigger": "ForwardX11Timeout",
		  "contents": "ForwardX11Timeout ${0:2h}" },
		{ "trigger": "ForwardX11Trusted\tToggle permission level for remote X11",
		  "contents": "ForwardX11Trusted ${0:{ yes | no \\}}" },
		{ "trigger": "GatewayPorts\tToggle showing local port forwards to remote host",
		  "contents": "GatewayPorts ${0:{ yes | no \\}}" },
		{ "trigger": "GlobalKnownHostsFile",
		  "contents": "GlobalKnownHostsFile ${0:/etc/ssh/ssh_known_hosts}" },
		{ "trigger": "GSSAPIAuthentication",
		  "contents": "GSSAPIAuthentication ${0:{ yes | no \\}}" },
		{ "trigger": "GSSAPIClientIdentity",
		  "contents": "GSSAPIClientIdentity ${0}" },
		{ "trigger": "GSSAPIDelegateCredentials",
		  "contents": "GSSAPIDelegateCredentials ${0:{ yes | no \\}}" },
		{ "trigger": "GSSAPIKeyExchange",
		  "contents": "GSSAPIKeyExchange ${0}" },
		{ "trigger": "GSSAPIRenewalForcesRekey",
		  "contents": "GSSAPIRenewalForcesRekey ${0:{ yes | no \\}}" },
		{ "trigger": "GSSAPITrustDns",
		  "contents": "GSSAPITrustDns ${0:{ yes | no \\}}" },
		{ "trigger": "HashKnownHosts\tObfuscate entry in known_hosts",
		  "contents": "HashKnownHosts ${0:{ yes | no \\}}" },
		{ "trigger": "HostbasedAuthentication\tToggle rhosts with pub key auth",
		  "contents": "HostbasedAuthentication ${0:{ yes | no \\}}" },
		{ "trigger": "HostbasedKeyTypes\tList by preference",
		  "contents": "HostbasedKeyTypes ${0:^prepend,+append,-remove,replace}" },
		{ "trigger": "HostKeyAlgorithms\tList by preference",
		  "contents": "HostKeyAlgorithms ${0:^prepend,+append,-remove,replace}" },
		{ "trigger": "HostKeyAlias",
		  "contents": "HostKeyAlias ${0:hostname}" },
		{ "trigger": "HostName\tSet real hostname",
		  "contents": "HostName ${0:%h.example.com}" },
		{ "trigger": "IdentitiesOnly\tSuppress keys from ~/.ssh",
		  "contents": "IdentitiesOnly ${0:{ yes | no \\}}" },
		{ "trigger": "IdentityAgent",
		  "contents": "IdentityAgent ${0:{ SSH_AUTH_SOCK | ~/.ssh/socket/path | \\$PATH_VAR | none \\}}" },
		{ "trigger": "IdentityFile\tPath to key file",
		  "contents": "IdentityFile ${0:~/.ssh/id_rsa_%h}" },
		{ "trigger": "IgnoreUnknown\tPattern for options to ignore",
		  "contents": "IgnoreUnknown ${0:FooBar*}" },
		{ "trigger": "Include\tConfiguration files to inject",
		  "contents": "Include ${0:~/.ssh/config_*_cloud}" },
		{ "trigger": "IPQoS",
		  "contents": "IPQoS ${0:{ af11 | af12 | ... | lowdelay | throughput | reliability \\}}" },
		{ "trigger": "KbdInteractiveAuthentication\tToggle interactive login on the CLI",
		  "contents": "KbdInteractiveAuthentication ${0:{ yes | no \\}}" },
		{ "trigger": "KbdInteractiveDevices",
		  "contents": "KbdInteractiveDevices ${0:bsdauth,pam,skey}" },
		{ "trigger": "KexAlgorithms\tKey exchange algorithms",
		  "contents": "KexAlgorithms ${0:^prepend,+append,-remove,replace}" },
		{ "trigger": "LocalCommand\tExecute command locally when connection successful",
		  "contents": "LocalCommand ${0:echo \"tada! %C, %d, %h, %i, %l, %n, %p, %r, %T, %u\"}" },
		{ "trigger": "LocalForward\tForward local port over SSH to third party",
		  "contents": "LocalForward ${1:[bind_address:]port} ${2:host}:${3:hostport}" },
		{ "trigger": "LogLevel",
		  "contents": "LogLevel ${0:{ QUIET | FATAL | ERROR | INFO | ... \\}}" },
		{ "trigger": "MACs\tMessage Authentication Code algorithms",
		  "contents": "MACs ${0:^prepend,+append,-remove,replace}" },
		{ "trigger": "NoHostAuthenticationForLocalhost",
		  "contents": "NoHostAuthenticationForLocalhost ${0:{ yes | no \\}}" },
		{ "trigger": "NumberOfPasswordPrompts",
		  "contents": "NumberOfPasswordPrompts ${0:1}" },
		{ "trigger": "PasswordAuthentication\tToggle CLI password entry",
		  "contents": "PasswordAuthentication ${0:{ yes | no \\}}" },
		{ "trigger": "PermitLocalCommand",
		  "contents": "PermitLocalCommand ${0:{ yes | no \\}}" },
		{ "trigger": "Port\tConnect on this port",
		  "contents": "Port ${0:22}" },
		{ "trigger": "PreferredAuthentications",
		  "contents": "PreferredAuthentications ${0:gssapi-with-mic,hostbased,publickey,keyboard-interactive,password}" },
		// { "trigger": "Protocol",
		//   "contents": "Protocol ${0:2}" },
		{ "trigger": "ProxyCommand\tRun command to establish proxy",
		  "contents": "ProxyCommand ${0:/usr/bin/nc -X connect -x 192.0.2.0:8080 %h %p}" },
		{ "trigger": "ProxyJump\tUse SSH on `host` as proxy",
		  "contents": "ProxyJump ${0:[user@]host[:port]}" },
		{ "trigger": "ProxyUseFdpass\tPass a connected FD instead of continuing interactively",
		  "contents": "ProxyUseFdpass ${0:{ yes | no \\}}" },
		{ "trigger": "PubkeyAcceptedKeyTypes\tList by preference",
		  "contents": "PubkeyAcceptedKeyTypes ${0:^prepend,+append,-remove,replace}" },
		{ "trigger": "PubkeyAuthentication",
		  "contents": "PubkeyAuthentication ${0:{ yes | no \\}}" },
		{ "trigger": "RekeyLimit\tData-length and duration before rekey",
		  "contents": "RekeyLimit ${0:2G 3h}" },
		{ "trigger": "RemoteCommand\tRun command on server after connecting",
		  "contents": "RemoteCommand ${0:echo \"tada! %C, %d, %h, %i, %l, %n, %p, %r, %u\"}" },
		{ "trigger": "RemoteForward\tForward ports",
		  "contents": "RemoteForward ${1:[bind_address:]port}${2: [host:hostport]}" },
		{ "trigger": "RequestTTY",
		  "contents": "RequestTTY ${0:{ yes | force | auto \\}}" },
		{ "trigger": "RevokedHostKeys",
		  "contents": "RevokedHostKeys ${0}" },
		{ "trigger": "RhostsRSAAuthentication",
		  "contents": "RhostsRSAAuthentication ${0}" },
		{ "trigger": "RSAAuthentication",
		  "contents": "RSAAuthentication ${0:{ yes | no \\}}" },
		{ "trigger": "SendEnv",
		  "contents": "SendEnv ${0}" },
		{ "trigger": "ServerAliveCountMax",
		  "contents": "ServerAliveCountMax ${0:3}" },
		{ "trigger": "ServerAliveInterval\tTimeout to send check-alive in seconds",
		  "contents": "ServerAliveInterval ${0:300}" },
		{ "trigger": "SetEnv",
		  "contents": "SetEnv ${0}" },
		{ "trigger": "SmartcardDevice",
		  "contents": "SmartcardDevice ${0}" },
		{ "trigger": "StreamLocalBindMask",
		  "contents": "StreamLocalBindMask ${0:0177}" },
		{ "trigger": "StreamLocalBindUnlink",
		  "contents": "StreamLocalBindUnlink ${0:{ yes | no \\}}" },
		{ "trigger": "StrictHostKeyChecking",
		  "contents": "StrictHostKeyChecking ${0:{ yes | no | ask | accept-new | off \\}}" },
		{ "trigger": "SyslogFacility",
		  "contents": "SyslogFacility ${0:{ DAEMON | USER | AUTH | LOCAL0 | ... \\}}" },
		{ "trigger": "TCPKeepAlive",
		  "contents": "TCPKeepAlive ${0:{ yes | no \\}}" },
		{ "trigger": "Tunnel",
		  "contents": "Tunnel ${0:{ yes | no | ethernet | point-to-point \\}}" },
		{ "trigger": "TunnelDevice",
		  "contents": "TunnelDevice ${0:local_tun[:remote_tun]}" },
		{ "trigger": "UpdateHostKeys\tUpdate known_hosts",
		  "contents": "UpdateHostKeys ${0:{ yes | no | ask \\}}" },
		{ "trigger": "UseKeychain",
		  "contents": "UseKeychain ${0}" },
		{ "trigger": "UsePrivilegePort",
		  "contents": "UsePrivilegePort ${0}" },
		{ "trigger": "User\tSet user",
		  "contents": "User ${0:username}" },
		{ "trigger": "UserKnownHostsFile\tPath to `known_hosts`",
		  "contents": "UserKnownHostsFile ${0:~/.ssh/known_hosts}" },
		{ "trigger": "VerifyHostKeyDNS",
		  "contents": "VerifyHostKeyDNS ${0:{ yes | no | ask \\}}" },
		{ "trigger": "VisualHostKey\tShow ASCII art for host's key",
		  "contents": "VisualHostKey ${0:{ yes | no \\}}" },
		{ "trigger": "XAuthLocation",
		  "contents": "XAuthLocation ${0:/usr/X11R6/bin/xauth}" },
	]
}
